[
    {
        "id": "aircon_predict_flow",
        "type": "tab",
        "label": "Aircon AI Prediction (ninjateaparty.ai.aircon with train.py/predict.py)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "inject_predict",
        "type": "inject",
        "z": "aircon_predict_flow",
        "name": "Test Prediction",
        "props": [
            {
                "p": "inside_temp",
                "v": "22.5",
                "vt": "num"
            },
            {
                "p": "outside_temp",
                "v": "15.0",
                "vt": "num"
            },
            {
                "p": "roof_temp",
                "v": "18.0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 100,
        "wires": [["prepare_predict"]]
    },
    {
        "id": "prepare_predict",
        "type": "function",
        "z": "aircon_predict_flow",
        "name": "Prepare Request",
        "func": "// Prepare the prediction request payload\nmsg.payload = {\n    \"time\": \"now\",\n    \"inside_temperature\": msg.inside_temp || 22.5,\n    \"outside_temperature\": msg.outside_temp || 15.0,\n    \"roof_temperature\": msg.roof_temp || 18.0\n};\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [["http_predict"]]
    },
    {
        "id": "http_predict",
        "type": "http request",
        "z": "aircon_predict_flow",
        "name": "Aircon AI Predict",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:5000/predict",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 100,
        "wires": [["process_predict"]]
    },
    {
        "id": "process_predict",
        "type": "function",
        "z": "aircon_predict_flow",
        "name": "Process Response",
        "func": "// Process the API response\nif (msg.payload.status === \"success\") {\n    msg.prediction = msg.payload.prediction;\n    msg.topic = \"aircon/prediction\";\n    node.status({fill:\"green\", shape:\"dot\", text:`Predicted: ${msg.prediction.toFixed(1)}Â°C`});\n} else {\n    msg.error = msg.payload.error;\n    node.status({fill:\"red\", shape:\"ring\", text:\"Prediction failed\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [["debug_predict"]]
    },
    {
        "id": "debug_predict",
        "type": "debug",
        "z": "aircon_predict_flow",
        "name": "Prediction Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 100,
        "wires": []
    },
    {
        "id": "inject_health",
        "type": "inject",
        "z": "aircon_predict_flow",
        "name": "Health Check",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 200,
        "wires": [["http_health"]]
    },
    {
        "id": "http_health",
        "type": "http request",
        "z": "aircon_predict_flow",
        "name": "Aircon AI Health",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:5000/health",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 320,
        "y": 200,
        "wires": [["process_health"]]
    },
    {
        "id": "process_health",
        "type": "function",
        "z": "aircon_predict_flow",
        "name": "Process Health",
        "func": "// Process health check response\nif (msg.payload.status === \"healthy\") {\n    msg.topic = \"aircon/health\";\n    msg.healthy = true;\n    node.status({fill:\"green\", shape:\"dot\", text:\"API Healthy\"});\n} else {\n    msg.healthy = false;\n    msg.error = msg.payload.error || \"API Unhealthy\";\n    node.status({fill:\"red\", shape:\"ring\", text:\"API Unhealthy\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 200,
        "wires": [["debug_health"]]
    },
    {
        "id": "debug_health",
        "type": "debug",
        "z": "aircon_predict_flow",
        "name": "Health Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "inject_train",
        "type": "inject",
        "z": "aircon_predict_flow",
        "name": "Train Model",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 300,
        "wires": [["prepare_train"]]
    },
    {
        "id": "prepare_train",
        "type": "function",
        "z": "aircon_predict_flow",
        "name": "Prepare Training",
        "func": "// Training doesn't need a payload, but we'll set headers\nmsg.payload = {};\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 300,
        "wires": [["http_train"]]
    },
    {
        "id": "http_train",
        "type": "http request",
        "z": "aircon_predict_flow",
        "name": "Aircon AI Train",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:5000/train",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 300,
        "wires": [["process_train"]]
    },
    {
        "id": "process_train",
        "type": "function",
        "z": "aircon_predict_flow",
        "name": "Process Training",
        "func": "// Process training response\nif (msg.payload.status === \"success\") {\n    msg.topic = \"aircon/training\";\n    msg.features = msg.payload.features;\n    node.status({fill:\"green\", shape:\"dot\", text:\"Training completed\"});\n} else {\n    msg.error = msg.payload.error;\n    node.status({fill:\"red\", shape:\"ring\", text:\"Training failed\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 300,
        "wires": [["debug_train"]]
    },
    {
        "id": "debug_train",
        "type": "debug",
        "z": "aircon_predict_flow",
        "name": "Training Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 300,
        "wires": []
    }
]
